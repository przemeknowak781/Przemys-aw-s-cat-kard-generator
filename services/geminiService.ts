import { GoogleGenAI } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
    // In a real application, you might want to handle this more gracefully.
    // For this environment, we assume the key is present.
    console.warn("API_KEY environment variable not set. The application will not be able to generate images.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

export const generateCatImage = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '4:3', // A standard-ish art ratio, slightly wider to fit card better
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image with Gemini:", error);
        let errorMessage = "An unexpected error occurred while generating the image.";
        if (error instanceof Error) {
            const lowerCaseMessage = error.message.toLowerCase();
            if (lowerCaseMessage.includes('api key')) {
                errorMessage = "Invalid API Key. Please ensure it is configured correctly.";
            } else if (lowerCaseMessage.includes('network') || lowerCaseMessage.includes('fetch')) {
                errorMessage = "Network error. Please check your internet connection and try again.";
            } else if (lowerCaseMessage.includes('quota')) {
                errorMessage = "API quota exceeded. Please check your usage limits or try again later.";
            } else {
                // Use a cleaner version of the message if it's not a common one.
                errorMessage = error.message.split(';')[0];
            }
        }
        throw new Error(`Failed to generate cat image. ${errorMessage}`);
    }
};
